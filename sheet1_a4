import numpy as np
import timeit
from matplotlib import pyplot as plt
import sys

sys.setrecursionlimit(400000000)

def quickSort(array, low, high, verbose=False):
    if low < high:
        pi = partition(array, low, high, verbose)
        quickSort(array, low, pi - 1)
        quickSort(array, pi + 1, high)
    return


def quickSort_partial(array, low, high, quartile=0, verbose=False):
    if low < high:
        pi = partition(array, low, high, verbose)
        if pi < quartile:
            quickSort_partial(array, pi + 1, high, quartile)
        else:
            quickSort_partial(array, low, pi - 1, quartile)
    # pi = partition(array, low, high, verbose)
    # if low < quartile:
    #     quickSort_partial(array, pi + 1, high, quartile, verbose)
    # elif low >= quartile: 
    #     quickSort_partial(array, low, pi - 1, quartile, verbose)
    return


def partition(array, low, high, verbose=False):
    pivot = array[high]
    i = low - 1

    for j in range(low, high):
        if array[j] <= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])
            if verbose:
                print(array)

    (array[i + 1], array[high]) = (array[high], array[i + 1])
    if verbose:
        print(array)
    return i + 1


def find_quartile(array, q):
    if q < 0 or q > 1:
        return 0
    quartile_index = int(len(array)*q)
    quickSort_partial(array, 0, len(array)-1, quartile_index, verbose=False)
    return array[quartile_index]


def find_interquartile_range_partial_sort(array):
    arr_copy = array.copy()
    q1 = find_quartile(arr_copy, 0.25)
    q3 = find_quartile(arr_copy, 0.75)
    return q3-q1, arr_copy


def find_interquartile_range_np(array):
    arr_copy = array.copy()
    q1 = np.percentile(arr_copy, 25)
    q3 = np.percentile(arr_copy, 75)
    return q3-q1


def find_interquartile_range_full_sort(array):
    arr_copy = array.copy()
    quickSort(arr_copy, 0, len(arr_copy)-1)
    q1 = arr_copy[int(len(arr_copy)*0.25)]
    q3 = arr_copy[int(len(arr_copy)*0.75)]
    return q3-q1, arr_copy


num_entries = 10000
random_array = np.random.rand(num_entries)
sorted_array = random_array.copy()
partial_sorted_array = random_array.copy()


#find quartiles for visual check
q1y = np.percentile(random_array, 25)
q3y = np.percentile(random_array, 75)
q1x = int(len(random_array)*0.25)
q3x = int(len(random_array)*0.75)


range_partial, partial_sorted_array = find_interquartile_range_partial_sort(partial_sorted_array)
range_full, sorted_array = find_interquartile_range_full_sort(sorted_array)
range_np = find_interquartile_range_np(random_array)

print("Full sort: ", range_full)
print("Partial sort: ", range_partial)
print("Numpy: ", range_np)

fig, axs = plt.subplots(1, 3, figsize=(15, 5))
axs[0].plot(random_array)
axs[0].set_title('Random array')
axs[1].plot(sorted_array)
axs[1].plot([q1x, q3x], [q1y, q3y], 'ro')
axs[1].set_title('Sorted array')
axs[2].plot(partial_sorted_array) 
axs[2].set_title('Partially sorted array')
axs[2].plot([q1x, q3x], [q1y, q3y], 'ro')
plt.show()  

num_entries = 1000000
random_array = np.random.rand(num_entries)
sorted_array = random_array.copy()
partial_sorted_array = random_array.copy()

num_trials = 1
print("time for find_interquartile_range_np with array length = "+str(num_entries)+" : ", timeit.timeit(lambda: find_interquartile_range_np(random_array), number=num_trials))
print("time for find_interquartile_range_full_sort with array length = "+str(num_entries)+" : ", timeit.timeit(lambda: find_interquartile_range_full_sort(sorted_array), number=num_trials))
print("time for find_interquartile_range_partial_sort with array length = "+str(num_entries)+" : ", timeit.timeit(lambda: find_interquartile_range_partial_sort(partial_sorted_array), number=num_trials))
print() 

