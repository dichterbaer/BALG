import numpy as np
import timeit
from matplotlib import pyplot as plt
import cv2
from vstru2mw import vstru2mw

from skimage.util import img_as_ubyte
from skimage.filters.rank import entropy
from skimage.morphology import disk, square
from skimage.color import rgb2hsv, rgb2gray, rgb2yuv
from balg_utils import race_functions, difference_image, read_image, race_functions2


def entropy_ala_huang_vnormal(img, mask_in, use_LUT = True):
    # # check if the mask size is odd
    # if mask_in.shape[0] % 2 == 0:
    #     raise ValueError('Mask size must be odd')
    LUT = gen_LUT_plog2p(mask_in)
    mask = vstru2mw(mask_in)
    # create a new image with the same size as the input image
    entropy_img = np.zeros(img.shape)
    # filter_height = mask.shape[0]
    # filter_width = mask[]]

    #create empty histogram with 256 bins
    hist = np.zeros(256)
    hist2 = np.zeros(256)
    #iterate over the image lines and ignore the border pixels
    for j in range(int(mask[0][0]), img.shape[0] - int(mask[0][0])):
        #initialize the histogram for the line
        init_histogram_v_normal(img, hist, int(mask[0][0]), j, mask)
        #iterate over the line and ignore the border pixels
        for i in range(mask.shape[0]//2, img.shape[1] - mask.shape[0]//2):
            #calculate the entropy of the histogram
            if use_LUT:
                entropy_img[j, i] = calc_entropy_wLUT(hist, LUT)
            else:
                entropy_img[j, i] = calc_entropy_woLUT(hist)
            #update the histogram for the next iteration
            update_histogram_v_normal(img, hist, i, j, mask)
    return entropy_img



def entropy_ala_huang_vnormal2(img, mask_in, use_LUT = True):
    # # check if the mask size is odd
    # if mask_in.shape[0] % 2 == 0:
    #     raise ValueError('Mask size must be odd')
    LUT = gen_LUT_plog2p(mask_in)
    mask = vstru2mw(mask_in)
    # create a new image with the same size as the input image
    entropy_img = np.zeros(img.shape)
    # filter_height = mask.shape[0]
    # filter_width = mask[]]

    #create empty histogram with 256 bins
    hist = np.zeros(256)
    #iterate over the image lines and ignore the border pixels
    for j in range(int(mask[0][0]), img.shape[0] - int(mask[0][0])):
        #initialize the histogram for the line
        init_histogram_v_normal2(img, hist, int(mask[0][0]), j, mask)
        #iterate over the line and ignore the border pixels
        for i in range(mask.shape[0]//2, img.shape[1] - mask.shape[0]//2):
            #calculate the entropy of the histogram
            if use_LUT:
                entropy_img[j, i] = calc_entropy_wLUT(hist, LUT)
            else:
                entropy_img[j, i] = calc_entropy_woLUT(hist)
            #update the histogram for the next iteration
            update_histogram_v_normal(img, hist, i, j, mask)
    return entropy_img


def calc_entropy_wLUT(hist, LUT):
    #calculate the entropy of the histogram 
    hist = hist[hist > 0].astype(np.int64)
    #calc entropy with LUT
    entr = np.sum(LUT[hist-1])
    return entr


def calc_entropy_woLUT(hist):
    # calculate the entropy of the histogram 
    # hist = hist / np.sum(hist)
    hist = hist[hist > 0].astype(np.int64)
    #calc entropy without LUT
    pi = hist / np.sum(hist)
    entr = np.sum(pi * np.log2(1/pi))
    return entr


def gen_LUT_plog2p(mask):
    #count non zero elements in mask
    num_entries = np.sum(mask)
    #create LUT
    i = np.arange(1,num_entries+1,1)        
    pi = i/num_entries
    LUT = pi*np.log2(1/pi)
    return LUT


def init_histogram_v_normal(img, hist, x, y, filter):
    #fill histogramm with 0
    hist.fill(0)
    #iterate over the mask and fill histogram
    k=0
    for j in range(int(-filter[k][2]), int(filter[k][2]) + 1):
        for i in range(-int(filter[k][0]-filter[k][2]), int(filter[k][0]-filter[k][2])+1):
            #nicht pixelweise durchgehen sondern mit np(:)
            hist[img[y+j, x+i]] += 1
        k+=1
    return


def init_histogram_v_normal2(img, hist, x, y, filter):
    #fill histogramm with 0
    hist.fill(0)
    #iterate over the mask and fill histogram
    k=0
    for j in range(-(filter.shape[0]//2), filter.shape[0]//2 + 1):
        #for i in range(-int(filter[k][0]-filter[k][2]), int(filter[k][0]-filter[k][2])+1):
        #nicht pixelweise durchgehen sondern mit np(:)
        #calc start and end index
        x_start = int(x-(filter[k][1]//2))
        x_end = int(x+(filter[k][1]//2))+1
        hist[img[y+j, x_start:x_end]] += 1
        k+=1
    return



def update_histogram_v_normal(img, hist, x, y, filter):
    #update histogram
    k=0
    for j in range(int(-filter[k][2]), int(filter[k][2]) + 1):
        hist[img[ y + j, x - (int(filter[k][1]//2))]] -= 1
        if(x + (int(filter[k][1]//2))+1 < img.shape[1]):
            hist[img[y + j, x + (int(filter[k][1]//2))+1]] += 1
        k+=1
    return


def entropy_vnormal_pad(img, mask):
    w2 = mask.shape[0] // 2
    im_padded = np.pad(img, ((w2, w2), (w2, w2)), 'constant', constant_values=0)
    im_out = entropy_ala_huang_vnormal2(im_padded, mask)
    return im_out[w2:-w2, w2:-w2]


# create median image with cv2.medianBlur
def median_cv2(img, s):
    median_img = cv2.medianBlur(img, s)
    return median_img


testarray = [[10,5,6,20,4,10,8],
            [15,1,7,2,9,11,7],
            [18,4,3,6,8,10,12],
            [1,6,7,8,9,20,21],
            [10,15,18,2,1,3,4],
            [20,14,15,9,2,1,10],
            [18,4,3,6,8,10,12]]

testarray = np.array(testarray).astype(np.uint8)

mask = disk(2)

testarray = read_image(0)
img_entropy_vnormal = entropy_vnormal_pad(testarray, mask)
img_entropy_skimage = entropy(testarray, mask)
difference_image(img_entropy_vnormal, img_entropy_skimage, "vnormal", "skimage")
# entropy_ala_huang_vnormal2(img, mask, True)1
# difference_image(entropy_ala_huang_vnormal(testarray, mask, True), entropy_ala_huang_vnormal2(testarray, mask, True))
# race_functions(entropy_ala_huang_vnormal, entropy, 10, (img, mask, True),(img, mask), verbose=True)
race_functions2((entropy_ala_huang_vnormal, entropy_ala_huang_vnormal2, entropy), ((testarray, mask, True),(testarray, mask, True),(testarray, mask)), 10, verbose=True)


#img_entropy_scipy = entropy(img, mask)
img_entropy_vnormal = entropy_ala_huang_vnormal(testarray, mask)
#difference_image(img_entropy_scipy, img_entropy_vnormal, 'scipy', 'vnormal')

# img_entropy_vnormal = entropy_ala_huang_vnormal(img, disk(21))
# img_entropy_scipy = entropy(img, disk(21))
# difference_image(img_entropy_vnormal, img_entropy_scipy, 'vnormal', 'scipy')

filter_sizes = []
times_wLut = []
times_woLut = []
num_runs = 1
for mask_size in range(2, 10):
    mask = disk(mask_size)
    print('Maskengröße: ' + str(mask_size))
    t_wLut, t_woLut = race_functions(entropy_ala_huang_vnormal, entropy_ala_huang_vnormal, num_runs, (img, mask, True), (img, mask, False), verbose=True)
    times_wLut.append(t_wLut)
    times_woLut.append(t_woLut)
    filter_sizes.append(mask_size)


plt.plot(filter_sizes, times_wLut, '*', filter_sizes, times_woLut, 'x')
plt.xlabel('Größe Filtermaske in Pixel')
plt.ylabel('Ausführungsdauer in s')
plt.legend(['with LUT', 'without LUT'])
plt.show()



filter_sizes = []
times_wLut = []
times_scipy = []
num_runs = 2
for mask_size in range(2, 10):
    mask = disk(mask_size)
    print('Maskengröße: ' + str(mask_size))
    t_wLut, t_scipy = race_functions(entropy_ala_huang_vnormal, entropy, num_runs, (img, mask, True), (img, mask), verbose=True)
    times_wLut.append(t_wLut)
    times_scipy.append(t_scipy)
    filter_sizes.append(mask_size)


plt.plot(filter_sizes, times_wLut, '*', filter_sizes, times_scipy, 'x')
plt.xlabel('Größe Filtermaske in Pixel')
plt.ylabel('Ausführungsdauer in s')
plt.legend(['own implementation with LUT', 'scipy'])
plt.show()



# img_entropy_vnormal_wLut = entropy_ala_huang_vnormal(testarray, mask, True)
# img_entropy_vnormal_woLut = entropy_ala_huang_vnormal(testarray, mask, False)
# img_entropy_scipy = entropy(testarray, mask)
# difference_image(img_entropy_vnormal_wLut, img_entropy_vnormal_woLut, 'w LUT', 'wo LUT')










