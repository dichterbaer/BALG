import numpy as np
import timeit
from matplotlib import pyplot as plt
import cv2

from skimage import data
from skimage.util import img_as_ubyte
from skimage.filters.rank import entropy
from skimage.morphology import disk, square
from skimage.color import rgb2hsv, rgb2gray, rgb2yuv


filepaths = {
    0: r'data\artificialOrig.jpg',
    1: r'data\lena.png',
    2: r'data\mona_lisa.jpg',
    3: r'data\textur12.png',
    4: r'data\testimage2_100_100.png',
}

def read_image(image_number):
    img = cv2.imread(filename=filepaths.get(image_number))
    if len(img.shape)>2:
        img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    if(img.shape[1]> 1500 or img.shape[0]> 1500):
        scale_percent = 50 # percent of original size
        width = int(img.shape[1] * scale_percent / 100)
        height = int(img.shape[0] * scale_percent / 100)
        dim = (width, height)   
        img = cv2.resize(img, dim)
    return img


def median_huang(img, s):
    # check if the mask size is odd
    if s % 2 == 0:
        raise ValueError('Mask size must be odd')
    # create a new image with the same size as the input image
    median_img = np.zeros(img.shape)
    #create empty histogram with 256 bins
    hist = np.zeros(256)
    #iterate over the image lines and ignore the border pixels
    for j in range(s // 2, img.shape[0] - (s // 2)):
        #initialize the histogram for the line
        init_histogram(img, hist, s//2, j, s)
        #iterate over the line and ignore the border pixels
        for i in range(s // 2, img.shape[1] - (s // 2)):
            #calculate the median of the histogram
            #todo median mit medianpointer berechnen
            median_img[j, i] = np.argmax(np.cumsum(hist) >= (s * s) / 2)
            #update the histogram for the next iteration
            update_histogram(img, hist, i, j, s)
    return median_img.astype(np.uint8)



def median_entropy_ala_huang(img, s):
    # check if the mask size is odd
    if s % 2 == 0:
        raise ValueError('Mask size must be odd')
    # create a new image with the same size as the input image
    entropy_img = np.zeros(img.shape)
    #create empty histogram with 256 bins
    hist = np.zeros(256)
    #iterate over the image lines and ignore the border pixels
    for j in range(s // 2, img.shape[0] - (s // 2)):
        #initialize the histogram for the line
        init_histogram(img, hist, s//2, j, s)
        #iterate over the line and ignore the border pixels
        for i in range(s // 2, img.shape[1] - (s // 2)):
            #calculate the entropy of the histogram
            entropy_img[j, i] = calc_entropy(hist)
            #update the histogram for the next iteration
            update_histogram(img, hist, i, j, s)
    return entropy_img



def calc_entropy(hist):
    #calculate the entropy of the histogram 
    #todo LUT
    hist = hist / np.sum(hist)
    hist = hist[hist > 0]
    entropy = -np.sum(hist * np.log2(hist))
    return entropy



def init_histogram(img, hist, x, y, s):
    #fill histogramm with 0
    hist.fill(0)
    #iterate over the mask and fill histogram
    for j in range(-(s // 2), s // 2 + 1):
        for i in range(-(s // 2), s // 2 + 1):
            hist[img[y+j, x+i]] += 1
    return


def update_histogram(img, hist, x, y, s):
    #remove values from the histogram that are not in the mask anymore
    for j in range(-(s // 2), s // 2 + 1):
        hist[img[ y + j, x - s // 2]] -= 1
        if(x + s // 2 + 1 < img.shape[0]):
            hist[img[y + j, x + s // 2 + 1]] += 1
    return



# create median image with cv2.medianBlur
def median_cv2(img, s):
    median_img = cv2.medianBlur(img, s)
    return median_img



testarray = [[10,5,6,20,4,10,8],
            [15,1,7,2,9,11,7],
            [18,4,3,6,8,10,12],
            [1,6,7,8,9,20,21],
            [10,15,18,2,1,3,4],
            [20,14,15,9,2,1,10],
            [18,4,3,6,8,10,12]]

testarray = np.array(testarray).astype(np.uint8)
#testarray = read_image(0)
median_huang_img = median_huang(testarray, 3)
median_cv2_img = median_cv2(testarray, 3)


#calculate the difference between the both results
diff = median_huang_img - median_cv2_img
#show the both median images and the difference
plt.figure(figsize=(15, 15))
plt.subplot(1, 3, 1)
plt.imshow(median_huang_img, cmap='gray')
plt.title('Median with Huan\'s Algorithm')
plt.subplot(1, 3, 2)
plt.imshow(median_cv2_img, cmap='gray')
plt.title('Median with cv2.medianBlur')
plt.subplot(1, 3, 3)
plt.imshow(diff, cmap='gray')
plt.title('Difference')
plt.show()


entropy_huang_img = median_entropy_ala_huang(testarray, 3)
entropy_cv2_img = entropy(testarray, square(3))

#calculate the difference between the both results
diff = (entropy_huang_img - entropy_cv2_img).astype(np.uint8)
#show the both median images and the difference
plt.figure(figsize=(15, 15))
plt.subplot(1, 3, 1)
plt.imshow(entropy_huang_img, cmap='gray')
plt.title('Entropy with Huan\'s Algorithm')
plt.subplot(1, 3, 2)
plt.imshow(entropy_cv2_img, cmap='gray')
plt.title('Entropy with skimage.filters.rank.entropy')
plt.subplot(1, 3, 3)
plt.imshow(diff, cmap='gray')
plt.title('Difference')
plt.show()






