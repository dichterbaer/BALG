import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage.filters as flt
import cv2
import time



def gils_max_1d(data,w, pad_mode="reflect"):    

    
    # padding
    data = np.pad(data,w,pad_mode) 
    
    w2=w//2 # half size of filter
    nl = len(data)
    
    # indices of makro pixels
    tmp = nl//w*w
    ix = np.arange(w,tmp,w)        
    nw = np.size(ix)
    
    # makro pixels
    S=np.zeros([nw,w])
    R=np.zeros([nw,w])
    
    
    # Preprocessing
    S[:,0]=data[ix]
    
    for k in range(1,w):
        S[:,k]=np.maximum(S[:,k-1],data[ix+k])
        R[:,k]=np.maximum(R[:,k-1],data[ix-k])
    
    
    # Merging
    maxline=np.zeros(nl) 
    for j in range(1,w-1):
        maxline[ix-w2+j]=np.maximum(R[:,w-j-1],S[:,j])                
    maxline[ix+w-w2-1]=S[:,w-1]
    maxline[ix-w2]=R[:,w-1]

    
    return maxline[w:-w]




def gils_max_1d_reshape(img,w):
 
    # get shape
    s = np.shape(img)
    nPixels = np.prod(s)
    
    # reshape to 1D
    data = np.reshape(img,[nPixels])    
    
    # apply filter
    data = gils_max_1d(data,w)    
    
    # reshape to 2D and return
    return np.reshape(data,s)




def gils_max_2d(img,s,pad_mode="reflect"):    
    '''
    apply Gil-Werman maximum filter in rectangular neighborhood

    Parameters
    ----------
    img : numpy.array
        input image.
    s : int
        size of filter, incremented by one if s is even.
    pad_mode : string, optional
        padding mode for boundary treatment. The default is "reflect".

    Returns
    -------
    numpy.array
        maximum filtered image.

    '''
    
    if s % 2 == 0:
        s += 1    
       
    # prepare result image
    (h,w)=np.shape(img)
    img_result = np.zeros([h,w])
    
    # apply row-wise
    for y in range(0,h):
        img_result[y,:] = gils_max_1d(img[y,:], s, pad_mode)        
    
       
    # apply column-wise                           
    for x in range(0,w):
        img_result[:,x] = gils_max_1d(img_result[:,x], s, pad_mode)      
    
    return img_result


filepaths = {
    0: r'data\testimage_9x9.png',
    1: r'data\testimage_neighborhood.png',
    2: r'data\testimage_kinda_dog.png',
    3: r'data\testimage_50_50.png',
    4: r'data\testimage1.png',
    5: r'data\testimage_2_100_100.png',
    6: r'data\JC409.jpg'
}

def read_image(image_number):
    img = cv2.imread(filename=filepaths.get(image_number))
    if len(img.shape)>2:
        img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    if(img.shape[1]> 1500 or img.shape[0]> 1500):
        scale_percent = 50 # percent of original size
        width = int(img.shape[1] * scale_percent / 100)
        height = int(img.shape[0] * scale_percent / 100)
        dim = (width, height)   
        img = cv2.resize(img, dim)
    return img
  
img=read_image(6)   


#a)
"""
data=np.random.randint(256, size=(30))
k=7
maxdata = gils_max_1d(data, k)
maxdata2 = flt.maximum_filter1d(data,7)
print("Daten:")
print(data)
print("Maximum Gil:")
print(maxdata)
print("Abweichung Gil zu scipy:")
print(maxdata2-maxdata)
"""

#b)
"""
result = gils_max_1d_reshape(img,7)

# plot both
fig = plt.figure()
ax = fig.add_subplot(1, 2, 1)
plt.imshow(img,cmap="gray")
ax.set_title("Original")
ax = fig.add_subplot(1, 2, 2)
plt.imshow(result,cmap="gray")
ax.set_title("Result")
fig.suptitle("Gils Max", fontsize = 16)
plt.show() 
"""
    
#c)
"""
result = gils_max_2d(img,7)
result_scipy = flt.maximum_filter(img,7)


# plot both
fig = plt.figure()
ax = fig.add_subplot(1, 3, 1)
plt.imshow(img,cmap="gray")
ax.set_title("Original")
ax = fig.add_subplot(1, 3, 2)
plt.imshow(result_scipy,cmap="gray")
ax.set_title("Scipy")
ax = fig.add_subplot(1, 3, 3)
plt.imshow(result,cmap="gray")
ax.set_title("My Max")
fig.suptitle("Gils Max", fontsize = 16)
plt.show()     
"""
    
#d)
"""
result = gils_max_2d(img,7,"reflect")
result_scipy = flt.maximum_filter(img,7,mode="reflect")
        
# plot both
fig = plt.figure()
ax = fig.add_subplot(1, 3, 1)
plt.imshow(img,cmap="gray")
ax.set_title("Original")
ax = fig.add_subplot(1, 3, 2)
plt.imshow(result_scipy,cmap="gray")
ax.set_title("Scipy")
ax = fig.add_subplot(1, 3, 3)
plt.imshow(result,cmap="gray")
ax.set_title("My Max")
fig.suptitle("Gils Max", fontsize = 16)
plt.show()     
"""

#e)


time_arr = []
filter_sz_arr = []
result_arr = []
time_arr_scipy = []
result_arr_scipy = []
time_arr.append(0.0)
filter_sz_arr.append(0)
result_arr.append(img)
time_arr_scipy.append(0.0)
result_arr_scipy.append(img)

for filter_size in range(3,69,3):

    start = time.time()
    result_img = gils_max_2d(img,filter_size)
    end = time.time()
    time_result = np.round((end-start)*1000.0,2) #in ms
    
    start1 = time.time()
    result_img_scipy = flt.maximum_filter(img,filter_size)
    end1 = time.time()
    time_result_scipy = np.round((end1-start1)*1000.0,20) #in ms

    time_arr.append(time_result)
    filter_sz_arr.append(filter_size)
    result_arr.append(result_img)
    time_arr_scipy.append(time_result_scipy)
    result_arr_scipy.append(result_img_scipy)

arr_size = np.size(filter_sz_arr)
plt.plot(filter_sz_arr,time_arr,'o',filter_sz_arr,time_arr_scipy,'r*')
plt.xlabel("Größe Filtermaske")
plt.ylabel("Durchführungsdauer in ms")
plt.legend(['My GIL-Max', 'Scipy-Maximum'])

# plot both
fig = plt.figure()
ax = fig.add_subplot(3, 3, 2)
plt.imshow(result_arr[0],cmap="gray")
ax.set_title("Original")
ax = fig.add_subplot(3, 3, 4)
plt.imshow(result_arr[2],cmap="gray")
ax.set_title("My Gil "+np.str(filter_sz_arr[2]))
ax = fig.add_subplot(3, 3, 5)
plt.imshow(result_arr[(int)(arr_size/2)],cmap="gray")
ax.set_title("My Gil "+np.str(filter_sz_arr[(int)(arr_size/2)]))
ax = fig.add_subplot(3, 3, 6)
plt.imshow(result_arr[arr_size-1],cmap="gray")
ax.set_title("My Gil "+np.str(filter_sz_arr[arr_size-1]))

ax = fig.add_subplot(3, 3, 7)
plt.imshow(result_arr_scipy[2],cmap="gray")
ax.set_title("Scipy "+np.str(filter_sz_arr[2]))
ax = fig.add_subplot(3, 3, 8)
plt.imshow(result_arr_scipy[int(arr_size/2)],cmap="gray")
ax.set_title("Scipy "+np.str(filter_sz_arr[(int)(arr_size/2)]))
ax = fig.add_subplot(3, 3, 9)
plt.imshow(result_arr_scipy[arr_size-1],cmap="gray")
ax.set_title("Scipy "+np.str(filter_sz_arr[arr_size-1]))

fig.suptitle("Durchführungsdauer in Abhängigkeit zur Maskengröße", fontsize = 16)


#plt.show()
print("fertig")
