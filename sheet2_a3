import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage.filters as flt
import cv2
import time
from balg_utils import race_functions, read_image, difference_image



def gils_max_1d(data,w, pad_mode="reflect"):    

    
    # padding
    data = np.pad(data,w,pad_mode) 
    
    w2=w//2 # half size of filter
    nl = len(data)
    
    # indices of makro pixels
    tmp = nl//w*w
    ix = np.arange(w,tmp,w) 
    #ix=ix-1       
    nw = np.size(ix)
    
    # makro pixels
    S=np.zeros([nw,w])
    R=np.zeros([nw,w])
    
    
    # Preprocessing
    S[:,0]=data[ix]
    R[:,0]=data[ix]
    
    for k in range(1,w):
        S[:,k]=np.maximum(S[:,k-1],data[ix+k])
        R[:,k]=np.maximum(R[:,k-1],data[ix-k])
    
    
    # Merging
    maxline=np.zeros(nl) 
    for j in range(0,w-1):
        maxline[ix-w2+j]=np.maximum(R[:,w-j-1],S[:,j])                
    maxline[ix+w-w2-1]=S[:,w-1]
    maxline[ix-w2]=R[:,w-1]

    #cut paddding
    maxline = maxline[w:-w]
    return maxline




def gils_max_1d_reshape(img,w):
 
    # get shape
    s = np.shape(img)
    nPixels = np.prod(s)
    
    # reshape to 1D
    data = np.reshape(img,[nPixels])    
    
    # apply filter
    data = gils_max_1d(data,w)    
    
    # reshape to 2D and return
    return np.reshape(data,s)




def gils_max_2d(img,s,pad_mode="reflect"):    

    
    if s % 2 == 0:
        s += 1    
       
    # prepare result image
    (h,w)=np.shape(img)
    img_result = np.zeros([h,w])
    
    # apply row-wise
    for y in range(0,h):
        img_result[y,:] = gils_max_1d(img[y,:], s, pad_mode)        
    
       
    # apply column-wise                           
    for x in range(0,w):
        img_result[:,x] = gils_max_1d(img_result[:,x], s, pad_mode)      
    
    return img_result





  
img=read_image(1)   
problem=4

if problem == 1:
    #a)

    data=np.random.randint(255, size=(30))
    data=[130, 225,  54, 112,  43, 159, 182, 240,  98, 236, 217, 175, 149,  63,  12, 169,  55,  45, 143, 210,  71,  24, 200, 232, 163, 142, 143,  88,  55, 188]
    #data=[1,1,1,1,71,24,200,232,163,142,143,88,55,188,10]
    #data=[1,1,1,1,2,3]
    k=7
    maxdata = gils_max_1d(data, k)
    maxdata2 = flt.maximum_filter1d(data,k)
    #print("Daten:")
    #print(data)
    print("Maximum Gil:")
    print(maxdata)
    print("Abweichung Gil zu scipy:")
    print(maxdata2-maxdata)


if problem == 2:
    #b)

    result = gils_max_1d_reshape(img,7)

    # plot both
    fig = plt.figure()
    ax = fig.add_subplot(1, 2, 1)
    plt.imshow(img,cmap="gray")
    ax.set_title("Original")
    ax = fig.add_subplot(1, 2, 2)
    plt.imshow(result,cmap="gray")
    ax.set_title("Result")
    fig.suptitle("Gils Max", fontsize = 16)
    plt.show() 


if problem == 3:
    #c)

    result = gils_max_2d(img,21)
    result_scipy = flt.maximum_filter(img,21)
    diff=difference_image(result,result_scipy,"Gil Max","Scipy Max")
    race_functions(gils_max_2d,flt.maximum_filter,10,[img,21],[img,21])

"""
if problem == 4:
    #e)

    time_arr = []
    filter_sz_arr = []
    result_arr = []
    time_arr_scipy = []
    result_arr_scipy = []
    time_arr.append(0.0)
    filter_sz_arr.append(0)
    result_arr.append(img)
    time_arr_scipy.append(0.0)
    result_arr_scipy.append(img)

    for filter_size in range(3,69,3):

        start = time.time()
        result_img = gils_max_2d(img,filter_size)
        end = time.time()
        time_result = np.round((end-start)*1000.0,2) #in ms
        
        start1 = time.time()
        result_img_scipy = flt.maximum_filter(img,filter_size)
        end1 = time.time()
        time_result_scipy = np.round((end1-start1)*1000.0,20) #in ms

        time_arr.append(time_result)
        filter_sz_arr.append(filter_size)
        result_arr.append(result_img)
        time_arr_scipy.append(time_result_scipy)
        result_arr_scipy.append(result_img_scipy)

    arr_size = np.size(filter_sz_arr)
    plt.plot(filter_sz_arr,time_arr,'o',filter_sz_arr,time_arr_scipy,'r*')
    plt.xlabel("Größe Filtermaske")
    plt.ylabel("Durchführungsdauer in ms")
    plt.legend(['My GIL-Max', 'Scipy-Maximum'])

    # # plot both
    # fig = plt.figure()
    # ax = fig.add_subplot(3, 3, 2)
    # plt.imshow(result_arr[0],cmap="gray")
    # ax.set_title("Original")
    # ax = fig.add_subplot(3, 3, 4)
    # plt.imshow(result_arr[2],cmap="gray")
    # ax.set_title("My Gil "+np.str(filter_sz_arr[2]))
    # ax = fig.add_subplot(3, 3, 5)
    # plt.imshow(result_arr[(int)(arr_size/2)],cmap="gray")
    # ax.set_title("My Gil "+np.str(filter_sz_arr[(int)(arr_size/2)]))
    # ax = fig.add_subplot(3, 3, 6)
    # plt.imshow(result_arr[arr_size-1],cmap="gray")
    # ax.set_title("My Gil "+np.str(filter_sz_arr[arr_size-1]))

    # ax = fig.add_subplot(3, 3, 7)
    # plt.imshow(result_arr_scipy[2],cmap="gray")
    # ax.set_title("Scipy "+np.str(filter_sz_arr[2]))
    # ax = fig.add_subplot(3, 3, 8)
    # plt.imshow(result_arr_scipy[int(arr_size/2)],cmap="gray")
    # ax.set_title("Scipy "+np.str(filter_sz_arr[(int)(arr_size/2)]))
    # ax = fig.add_subplot(3, 3, 9)
    # plt.imshow(result_arr_scipy[arr_size-1],cmap="gray")
    # ax.set_title("Scipy "+np.str(filter_sz_arr[arr_size-1]))

    # fig.suptitle("Durchführungsdauer in Abhängigkeit zur Maskengröße", fontsize = 16)


    plt.show()
"""

if problem == 4:
    img=read_image(2)     
    num_runs=6

    time_arr = []
    filter_sz_arr = []
    time_arr_scipy = []
    time_arr.append(0.0)
    filter_sz_arr.append(0)
    time_arr_scipy.append(0.0)

    for filter_size in range(3,69,3):
        [time_gil,time_scpy]=race_functions(gils_max_2d,flt.maximum_filter,num_runs,(img,filter_size),(img,filter_size))
        filter_sz_arr.append(filter_size)
        time_arr.append(time_gil)
        time_arr_scipy.append(time_scpy)

    plt.plot(filter_sz_arr,time_arr,'o',filter_sz_arr,time_arr_scipy,'r*')
    plt.xlabel("Größe Filtermaske")
    plt.ylabel("Durchführungsdauer in ms")
    plt.legend(['My GIL-Max', 'Scipy-Maximum'])
    plt.show()
