import cv2
from balg_utils import read_image, difference_image, race_functions2
from matplotlib import pyplot as plt
from scipy.ndimage import morphological_laplace
import numpy as np

def linear_laplace_contrast_enhancement(img, ksize=3, c = 1):
    """Laplace contrast enhancement"""
    #apply laplace filter and multiply with constant
    laplace = c * cv2.Laplacian(img, cv2.CV_16S, ksize=ksize)
    #convert to uint8
    laplace = cv2.convertScaleAbs(laplace)
    #substract laplace from original image
    img_contrastEnhanced = cv2.subtract(img, laplace)
    return img_contrastEnhanced


def morphological_laplace_contrast_enhancement(img, ksize = 3, c = 1):
    morph_laplace = morphological_laplace(img, ksize)
    img_contrastEnhanced = cv2.subtract(img, c * morph_laplace, dtype=cv2.CV_16S)
    #convert to uint8
    img_contrastEnhanced = cv2.convertScaleAbs(img_contrastEnhanced)
    return img_contrastEnhanced


def tophap_contrast_enhancement(img, ksize = 3, c = 1):
    structuring_element = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (ksize, ksize))
    opnened = cv2.morphologyEx(img, cv2.MORPH_OPEN, structuring_element)
    closed = cv2.dilate(img, structuring_element)
    #create empty image with enogh space for the result
    img_contrastEnhanced = np.zeros(img.shape, dtype=np.uint16)
    img_contrastEnhanced = (1 + 2*c) * img - c * (opnened + closed)
    #convert to uint8
    img_contrastEnhanced = cv2.convertScaleAbs(img_contrastEnhanced)
    return img_contrastEnhanced



# img = read_image(r'data\lowContrast.jpg')
# c = 0.05
# img_contrastEnhanced_morphLaplace = morphological_laplace_contrast_enhancement(img, ksize=3, c = c)
# img_contrastEnhanced_linearLaplace = linear_laplace_contrast_enhancement(img, ksize=3, c = c)
# img_contrastEnhanced_tophap = tophap_contrast_enhancement(img, ksize=3, c = c)

# difference_image(img, img_contrastEnhanced_morphLaplace, name1='Original', name2='Contrast Enhanced')

# #show results in plot
# plt.figure(figsize=(15,10))
# plt.subplot(1,4,1)
# plt.imshow(img, cmap='gray')
# plt.title('Original')
# plt.subplot(1,4,2)
# plt.imshow(img_contrastEnhanced_linearLaplace, cmap='gray')
# plt.title('Lin Laplace with c = ' + str(c))
# plt.subplot(1,4,3)
# plt.imshow(img_contrastEnhanced_morphLaplace, cmap='gray')
# plt.title('Morph Laplace with c = ' + str(c))
# plt.subplot(1,4,4)
# plt.imshow(img_contrastEnhanced_tophap, cmap='gray')
# plt.title('Tophat with c = ' + str(c))
# plt.show()



# comperae linear_laplace_contrast_enhancement for different c
img = read_image(r'data\lowContrast.jpg')
smoothing_kernel = 3
img_smoothed = cv2.GaussianBlur(img, (smoothing_kernel,smoothing_kernel), 0)

c_values = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1]
img_contrastEnhanced_linearLaplace = []
for c in c_values:
    img_contrastEnhanced_linearLaplace.append(linear_laplace_contrast_enhancement(img_smoothed, ksize=3, c = c))


#show results in plot in square grid
plt.figure(figsize=(15,10))
plt.subplot(2,4,1)
plt.imshow(img, cmap='gray', vmin=0, vmax=255)
plt.title('Original')
for i in range(len(img_contrastEnhanced_linearLaplace)):
    plt.subplot(2,4,i+2)
    plt.imshow(img_contrastEnhanced_linearLaplace[i], cmap='gray', vmin=0, vmax=255)
    plt.title('Lin Laplace with c = ' + str(c_values[i]))
#main title
plt.suptitle(f'Linear Laplace Contrast Enhancement for different c \n image was smoothed before with kernel size {smoothing_kernel} \n all images are scaled from 0 to 255', fontsize=16)
plt.show()


# comperae morphological_laplace_contrast_enhancement for different c
img = read_image(r'data\lowContrast.jpg')
img_smoothed = cv2.GaussianBlur(img, (smoothing_kernel,smoothing_kernel), 0)


c_values = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1]
img_contrastEnhanced_morphLaplace = []
for c in c_values:
    img_contrastEnhanced_morphLaplace.append(morphological_laplace_contrast_enhancement(img_smoothed, ksize=3, c = c))

#show results in plot in square grid
plt.figure(figsize=(15,10))
plt.subplot(2,4,1)
plt.imshow(img, cmap='gray', vmin=0, vmax=255)
plt.title('Original')
for i in range(len(img_contrastEnhanced_morphLaplace)):
    plt.subplot(2,4,i+2)
    plt.imshow(img_contrastEnhanced_morphLaplace[i], cmap='gray', vmin=0, vmax=255)
    plt.title('Morph Laplace with c = ' + str(c_values[i]))
#main title
plt.suptitle(f'Morphological Laplace Contrast Enhancement for different c \n image was smoothed before with kernel size {smoothing_kernel} \n all images are scaled from 0 to 255', fontsize=16)
plt.show()

# comperae tophat_contrast_enhancement for different c
img = read_image(r'data\lowContrast.jpg')
img_smoothed = cv2.GaussianBlur(img, (smoothing_kernel,smoothing_kernel), 0)

c_values = [0.1, 0.2, 0.5, 1, 2, 5, 10]
img_contrastEnhanced_tophat = []
for c in c_values:
    img_contrastEnhanced_tophat.append(tophap_contrast_enhancement(img_smoothed, ksize=3, c = c))

#show results in plot in square grid
plt.figure(figsize=(15,10))
plt.subplot(2,4,1)
plt.imshow(img, cmap='gray', vmin=0, vmax=255)
plt.title('Original')
for i in range(len(img_contrastEnhanced_tophat)):
    plt.subplot(2,4,i+2)
    plt.imshow(img_contrastEnhanced_tophat[i], cmap='gray', vmin=0, vmax=255)
    plt.title('Tophat with c = ' + str(c_values[i]))
#main title
plt.suptitle(f'Tophat Contrast Enhancement for different c \n image was smoothed before with kernel size {smoothing_kernel} \n all images are scaled from 0 to 255', fontsize=16)
plt.show()

